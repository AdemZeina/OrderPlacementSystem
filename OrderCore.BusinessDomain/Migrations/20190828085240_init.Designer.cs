// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Order.Domain.Context;

namespace Order.Domain.Migrations
{
    [DbContext(typeof(OrderDataContext))]
    [Migration("20190828085240_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Order.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatedUser");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Phone");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid?>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Customer");
                });

            modelBuilder.Entity("Order.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatedUser");

                    b.Property<Guid?>("CustomerId");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("ServiceScheduleDate");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid?>("UpdatedUser");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Order.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatedUser");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("FromAddress");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Note");

                    b.Property<Guid?>("OrderId");

                    b.Property<decimal>("Price");

                    b.Property<Guid?>("ServicePricingId");

                    b.Property<string>("ToAddress");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid?>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServicePricingId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Order.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatedUser");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("SortingNumber");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid?>("UpdatedUser");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Order.Domain.Entities.ServicePricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Attribute");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatedUser");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Price");

                    b.Property<Guid?>("ServiceId");

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid?>("UpdatedUser");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePricings");
                });

            modelBuilder.Entity("Order.Domain.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("CreatedUser");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirsName")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<DateTime?>("UpdatedDate");

                    b.Property<Guid?>("UpdatedUser");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Order.Domain.Entities.Company", b =>
                {
                    b.HasBaseType("Order.Domain.Entities.Customer");

                    b.Property<string>("Address");

                    b.Property<string>("CompanyAddress");

                    b.Property<string>("Name");

                    b.Property<string>("ResponsibleEmail");

                    b.Property<string>("ResponsibleFirstName");

                    b.Property<string>("ResponsibleLastName");

                    b.Property<string>("ResponsiblePhone");

                    b.ToTable("Company");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Order.Domain.Entities.Individual", b =>
                {
                    b.HasBaseType("Order.Domain.Entities.Customer");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.ToTable("Individual");

                    b.HasDiscriminator().HasValue("Individual");
                });

            modelBuilder.Entity("Order.Domain.Entities.Order", b =>
                {
                    b.HasOne("Order.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Order.Domain.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Order.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Order.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Order.Domain.Entities.ServicePricing", "ServicePricing")
                        .WithMany()
                        .HasForeignKey("ServicePricingId");
                });

            modelBuilder.Entity("Order.Domain.Entities.ServicePricing", b =>
                {
                    b.HasOne("Order.Domain.Entities.Service", "Service")
                        .WithMany("ServicePricing")
                        .HasForeignKey("ServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
